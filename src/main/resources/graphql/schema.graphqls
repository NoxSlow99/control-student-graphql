# Only consults (Query)
type Query {
    # Student
    findStudentById(studentId : String) : Student
    findAllStudents : [Student]

    # Carrera
    findCarreraById(carreraId : String) : Carrera
    findAllCarreras : [Carrera]

    # Campu
    findCampuById(campuId : String) : Campu
    findAllCampu : [Campu]

    # Division
    findDivisionById(divisionId : String) : Division
    findAllDivision : [Division]
}

# Only mutations
type Mutation {
    # Student
    createStudent(inputStudent : InputStudent!) : Student
    updateStudent(studentId : String!, inputStudent : InputStudent) : Student

    # Carrera
    createCarrera(inputCarrera : InputCarrera!) : Carrera
    updateCarrera(carreraId : String!, inputCarrera : InputCarrera) : Carrera

    # Campu
    createCampu(inputCampu : InputCampu!) : Campu
    updateCampu(campuId : String!, inputCampu : InputCampu) : Campu

    # Division
    createDivision(inputDivision : InputDivision!) : Division
    updateDivision(divisionId : String!, inputDivision : InputDivision) : Division

    # Login
    login(authLoginRequest : AuthLoginRequest) : AuthResponse!

    # Register
    register(userRequest : AuthCreateUserRequest) : AuthResponse!
}

input AuthCreateUserRequest {
    username : String!,
    password : String!,
    roleRequest : AuthCreateRoleRequest!
}

input AuthCreateRoleRequest {
    roleListName : [String!]!
}

type AuthResponse {
    username : String,
    message : String,
    jwt : String,
    status : Boolean
}

type Student {
    id : ID,
    name : String,
    edad : Int,
    email : String,
    carrera : Carrera,
    campu : Campu,
    division : Division
}

type Carrera {
    id : ID,
    name : String,
    students : [Student],
    campus : [Campu],
    division : Division
}

type Campu {
    id : ID,
    name : String,
    students : [Student],
    carreras : [Carrera],
    divisiones : [Division]
}

type Division {
    id : ID,
    name : String,
    students : [Student],
    carreras : [Carrera]
}

# Inputs
input InputStudent {
    name : String!,
    edad : Int,
    email : String!
    carreraId : ID!
    campuId : ID!,
    divisionId : ID!
}

input InputCarrera {
    name : String!,
    divisionId : ID!
}

input InputCampu {
    name : String!,
    carrerasId : [ID!],
    divisionesId : [ID!]
}

input InputDivision {
    name : String!
}

input AuthLoginRequest {
    username : String!,
    password : String!
}